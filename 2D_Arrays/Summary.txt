ðŸ”¹ 1. BS â€“ Both Static (Rectangular 2D array)

Meaning: Rows and columns are fixed at compile time.
Memory: Entire 2D array is allocated in stack.
Syntax:
data_type array_name[rows][columns];

Example:

int a[2][3] = {{1,2,3}, {4,5,6}};
printf("%d", a[1][2]); // prints 6

Notes: Rectangular only. Size cannot be changed at runtime.

ðŸ”¹ 2. FSSD â€“ First Static, Second Dynamic

Meaning: Number of rows is fixed (static), but each row can have a different number of columns (dynamic).
Memory: Row pointers are static (stack).
        Columns allocated dynamically (heap) using malloc.
Syntax:
int *a[rows];        // static rows
for(int i=0; i<rows; i++)
    a[i] = (int*)malloc(columns[i] * sizeof(int)); // dynamic columns

Example:

int *a[2];
int cols[2] = {3, 2};
for(int i=0; i<2; i++)
    a[i] = (int*)malloc(cols[i]*sizeof(int));

a[0][2] = 5; // valid

Notes: Jagged array possible.

ðŸ”¹ 3. FDSS â€“ First Dynamic, Second Static

Meaning: Number of rows is dynamic (allocated at runtime), number of columns is fixed (static).
Memory: Row pointers allocated dynamically (heap).
        Each row has fixed columns.

Syntax:
int (*a)[columns] = malloc(rows * sizeof(*a)); 

Example:

int (*a)[3] = malloc(2 * sizeof(*a)); // 2 rows, 3 columns each
a[1][2] = 7; // valid

Notes: Memory is contiguous for all rows.

ðŸ”¹ 4. BD â€“ Both Dynamic

Meaning: Both rows and columns are allocated dynamically; fully dynamic 2D array.

Memory: Row pointers and columns are all on heap.
        Can have jagged arrays.

Syntax:
int **a = malloc(rows * sizeof(int*));
for(int i=0; i<rows; i++)
    a[i] = malloc(columns[i] * sizeof(int));


Example:

int **a;
int rows = 2;
int cols[2] = {3,4};
a = malloc(rows * sizeof(int*));
for(int i=0; i<rows; i++)
    a[i] = malloc(cols[i]*sizeof(int));

a[1][3] = 10; // valid

Notes: Fully flexible. Need to free each row and then the array.

| Type | Rows    | Columns | Memory Location | Shape       | Example Syntax                              |
| ---- | ------- | ------- | --------------- | ----------- | ------------------------------------------- |
| BS   | Static  | Static  | Stack           | Rectangular | `int a[2][3];`                              |
| FSSD | Static  | Dynamic | Stack+Heap      | Jagged      | `int *a[rows]; a[i]=malloc(cols[i]);`       |
| FDSS | Dynamic | Static  | Heap            | Rectangular | `int (*a)[cols] = malloc(rows*sizeof(*a));` |
| BD   | Dynamic | Dynamic | Heap            | Jagged      | `int **a = malloc(rows*sizeof(int*));`      |

âœ… Quick Points:

BS & FDSS: Rectangular arrays. Memory contiguous per row.
FSSD & BD: Jagged arrays. Columns can vary per row.
BS & FSSD: Row pointers fixed (stack).
FDSS & BD: Row pointers dynamic (heap).


Type      Rows       Columns      Memory Layout

BS        Static     Static       Stack (contiguous)
          +---+---+---+
          | 1 | 2 | 3 |  a[0][0..2]
          +---+---+---+
          | 4 | 5 | 6 |  a[1][0..2]
          +---+---+---+

FSSD      Static     Dynamic      Stack + Heap (jagged)
Stack: +-----+-----+       Heap:
       | a[0] | a[1] | ---> +---+---+---+   (a[0])
                           | 1 | 2 | 3 |
                           +---+---+---+
                           +---+---+       (a[1])
                           | 4 | 5 |
                           +---+---+

FDSS      Dynamic    Static       Heap (rectangular)
Heap:   +-----+-----+   
        | row0 | row1 | ---> +---+---+---+   (row0)
                           | 1 | 2 | 3 |
                           +---+---+---+
                           +---+---+---+   (row1)
                           | 4 | 5 | 6 |
                           +---+---+---+

BD        Dynamic    Dynamic      Heap (jagged)
Heap:   +-----+-----+   
        | a[0] | a[1] | ---> +---+---+---+   (a[0])
                           | 1 | 2 | 3 |
                           +---+---+---+
                           +---+---+---+---+   (a[1])
                           | 4 | 5 | 6 | 7 |
                           +---+---+---+---+

🧩 What Does static Mean in C?

The keyword static changes the lifetime and/or visibility of a variable or function.
It can be used in two main places:

Inside a function → Static Local Variable
Outside all functions → Static Global Variable (File Scope)

Let’s study both carefully 👇

🟢 1. Static Local Variable
🧠 Concept:

Normally, a local variable (like auto) is created when the function is called and destroyed when it returns.
But if you declare it as static, the variable is created only once and retains its value between multiple calls to the function.

It is still local to that function — cannot be accessed outside —
but it remembers its previous value.

✅ Example:
        #include <stdio.h>

        void counter() {
            static int count = 0;  // static local variable
            count++;
            printf("Count = %d\n", count);
        }

        int main() {
            counter();
            counter();
            counter();
            return 0;
        }

        🧾 Output:
        Count = 1
        Count = 2
        Count = 3

🔍 Explanation:

The variable count is initialized only once (to 0) — not every time the function runs.
Its value is preserved between function calls.
It is destroyed only when the program ends, not after the function exits.

🧠 Memory Details:

Stored in Data Segment (not Stack) of memory.
If not initialized, its default value = 0.
Lifetime = entire program execution.
Scope = local (visible only inside that function).

⚠️ Common Mistake:

People think static makes a variable global — ❌ that’s wrong.
It only makes it persistent, not visible outside.

💡 Another Example:
        #include <stdio.h>

        void test() {
            static int x = 5;
            x++;
            printf("%d ", x);
        }

        int main() {
            test();  // 6
            test();  // 7
            test();  // 8
        }

🟩 Even though x is declared inside the function, it keeps increasing with each call.

----------------------------------------------------------------------------------------------------------------
🔵 2. Static Global Variable (File Scope)

🧠 Concept:

If a global variable is declared as static, it becomes visible only inside the same file (translation unit).
This is called file scope or internal linkage.

In other words:

Other .c files cannot access this variable even if they use extern.

✅ Example:

    file1.c

    #include <stdio.h>
    static int num = 10;  // static global variable

    void display() {
        printf("num = %d\n", num);
    }


    file2.c

    #include <stdio.h>

    extern int num;  // trying to access num from file1.c

    int main() {
        printf("num = %d\n", num);
        return 0;
    }

🧾 Output:

❌ Compilation error: undefined reference to num

Because num in file1.c is static, so it’s hidden — can’t be accessed outside that file.

💡 Why Use It?

To hide implementation details.
To prevent name conflicts when you have multiple files.
Common in large projects and drivers.

🧠 Memory Details:
Property	Static Global
Scope	File (not visible outside file)
Lifetime	Entire program
Default Value	0
Memory	Data Segment

🟠 Static Function

Just like variables, functions can also be declared static.

✅ Example:

file1.c

    #include <stdio.h>

    static void greet() {
        printf("Hello!\n");
    }

    int main() {
        greet();
        return 0;
    }


file2.c

    extern void greet();  // trying to access from another file
    int main() {
        greet();  // ❌ Not allowed
    }

👉 The greet() function is visible only within file1.c, not in file2.c.

So, static hides both functions and global variables from other files.

⚡ Quick Comparison Summary
| Feature                   | Static Local             | Static Global         |
| ------------------------- | ------------------------ | --------------------- |
| Declared Inside Function? | ✅ Yes                   | ❌ No                |
| Scope                     | Local to that function   | Whole file            |
| Lifetime                  | Entire program           | Entire program        |
| Default Value             | 0                        | 0                     |
| Memory                    | Data Segment             | Data Segment          |
| Accessibility             | Only within the function | Only within that file |
| Preserves value?          | ✅ Yes                   | ✅ Yes               |


🧩 In Simple Words

static = permanent + hidden
Inside function → remembers old value
Outside function → hides variable/function from other files